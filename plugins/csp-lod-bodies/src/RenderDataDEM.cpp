////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "RenderDataDEM.hpp"

#include "../../../src/cs-utils/utils.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////

namespace csp::lodbodies {

////////////////////////////////////////////////////////////////////////////////////////////////////

/* explicit */
RenderDataDEM::RenderDataDEM(TileNode* node)
    : RenderData(node) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

/* virtual */
RenderDataDEM::~RenderDataDEM() = default;

////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderDataDEM::addFlag(Flags flag) {
  mFlags |= static_cast<glm::uint8>(flag);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderDataDEM::subFlag(Flags flag) {
  mFlags &= ~static_cast<glm::uint8>(flag);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool RenderDataDEM::testFlag(Flags flag) const {
  return mFlags & static_cast<glm::uint8>(flag);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

glm::uint8 RenderDataDEM::getFlags() const {
  return mFlags;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderDataDEM::clearFlags() {
  mFlags = 0x00;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

RenderDataDEM::Flags operator&(RenderDataDEM::Flags lhs, RenderDataDEM::Flags rhs) {
  return RenderDataDEM::Flags(static_cast<int>(lhs) & static_cast<int>(rhs));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

RenderDataDEM::Flags operator|(RenderDataDEM::Flags lhs, RenderDataDEM::Flags rhs) {
  return RenderDataDEM::Flags(static_cast<int>(lhs) | static_cast<int>(rhs));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

RenderDataDEM::Flags& operator&=(RenderDataDEM::Flags& lhs, RenderDataDEM::Flags rhs) {
  return lhs = lhs & rhs;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

RenderDataDEM::Flags& operator|=(RenderDataDEM::Flags& lhs, RenderDataDEM::Flags rhs) {
  return lhs = lhs | rhs;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

RenderDataDEM::Flags operator~(RenderDataDEM::Flags lhs) {
  return RenderDataDEM::Flags(~static_cast<int>(lhs));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::ostream& operator<<(std::ostream& os, RenderDataDEM::Flags flags) {
  os << "(";

  if (flags & cs::utils::enumCast(RenderDataDEM::Flags::eRender)) {
    os << "Render";
  }

  os << ")";

  return os;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::lodbodies
