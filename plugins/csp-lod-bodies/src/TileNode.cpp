////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "TileNode.hpp"

namespace csp::lodbodies {

////////////////////////////////////////////////////////////////////////////////////////////////////

TileNode::TileNode(TileId const& tileId)
    : mTileId(tileId) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileDataBase* TileNode::getTileData(TileDataType type) const {
  return mTileData.get(type).get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

PerDataType<std::unique_ptr<TileDataBase>> const& TileNode::getTileData() const {
  return mTileData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::setTileData(std::unique_ptr<TileDataBase> tile) {
  mTileData.set(tile->getDataType(), std::move(tile));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileNode* TileNode::getChild(int childIdx) const {
  return mChildren.at(childIdx).get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::setChild(int childIdx, TileNode* child) {
  // unset OLD parent
  if (mChildren.at(childIdx)) {
    mChildren.at(childIdx)->setParent(nullptr);
  }

  mChildren.at(childIdx).reset(child);

  // set NEW parent
  if (mChildren.at(childIdx)) {
    mChildren.at(childIdx)->setParent(this);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileNode* TileNode::getParent() const {
  return mParent;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::setParent(TileNode* parent) {
  mParent = parent;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool TileNode::isRefined() const {
  return mChildren[0] && mChildren[1] && mChildren[2] && mChildren[3];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileNode::getLevel() const {
  return mTileId.level();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

glm::int64 TileNode::getPatchIdx() const {
  return mTileId.patchIdx();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileNode::getLastFrame() const {
  return mLastFrame;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::setLastFrame(int frame) {
  mLastFrame = frame;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileNode::getAge(int frame) const {
  return frame - mLastFrame;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

BoundingBox<double> const& TileNode::getBounds() const {
  return mTb;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::setBounds(BoundingBox<double> const& tb) {
  mTb        = tb;
  mHasBounds = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::removeBounds() {
  mTb        = BoundingBox<double>();
  mHasBounds = false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool TileNode::hasBounds() const {
  return mHasBounds;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId const& TileNode::getTileId() const {
  return mTileId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

MinMaxPyramid* TileNode::getMinMaxPyramid() const {
  return mMinMaxPyramid.get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileNode::setMinMaxPyramid(std::unique_ptr<MinMaxPyramid> pyramid) {
  mMinMaxPyramid = std::move(pyramid);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::lodbodies
