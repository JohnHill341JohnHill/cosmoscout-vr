////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "TileDataBase.hpp"

#include "TileNode.hpp"

namespace csp::lodbodies {

////////////////////////////////////////////////////////////////////////////////////////////////////

/* explicit */
TileDataBase::TileDataBase(TileId const& tileId, uint32_t resolution)
    : mTileId(tileId)
    , mResolution(resolution)
    , mTexLayer(-1)
    , mLastFrame(-1) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileDataBase::getLevel() const {
  return mTileId.level();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

glm::int64 TileDataBase::getPatchIdx() const {
  return mTileId.patchIdx();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileDataBase::getTexLayer() const {
  return mTexLayer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileDataBase::setTexLayer(int layer) {
  mTexLayer = layer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileDataBase::getLastFrame() const {
  return mLastFrame;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileDataBase::setLastFrame(int frame) {
  mLastFrame = frame;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileDataBase::getAge(int frame) const {
  return frame - mLastFrame;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

BoundingBox<double> const& TileDataBase::getBounds() const {
  return mTb;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileDataBase::setBounds(BoundingBox<double> const& tb) {
  mTb        = tb;
  mHasBounds = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileDataBase::removeBounds() {
  mTb        = BoundingBox<double>();
  mHasBounds = false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool TileDataBase::hasBounds() const {
  return mHasBounds;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId const& TileDataBase::getTileId() const {
  return mTileId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

uint32_t TileDataBase::getResolution() const {
  return mResolution;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

MinMaxPyramid* TileDataBase::getMinMaxPyramid() const {
  return mMinMaxPyramid.get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileDataBase::setMinMaxPyramid(std::unique_ptr<MinMaxPyramid> pyramid) {
  mMinMaxPyramid = std::move(pyramid);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::lodbodies
