////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "Node.hpp"

#include "NodeGraph.hpp"
#include "WebSocket.hpp"

#include <algorithm>

namespace csl::nodeeditor {

////////////////////////////////////////////////////////////////////////////////////////////////////

void Node::setID(uint32_t id) {
  mID = id;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Node::setSocket(std::shared_ptr<WebSocket> socket) {
  mSocket = std::move(socket);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Node::setGraph(std::shared_ptr<NodeGraph> graph) {
  mGraph = std::move(graph);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Node::sendMessage(nlohmann::json const& message) const {
  nlohmann::json json = {{"toNode", mID}, {"message", message}};
  mSocket->sendMessage(json.dump());
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool Node::hasNewInput() const {
  auto connections = mGraph->getInputConnections(mID);
  return !connections.empty() &&
         std::any_of(connections.begin(), connections.end(), [](auto c) { return c->mHasNewData; });
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool Node::hasNewInput(std::string const& socket) const {
  auto connection = mGraph->getInputConnection(mID, socket);
  return connection && connection->mHasNewData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool Node::hasUndefinedOutput() const {
  auto connections = mGraph->getOutputConnections(mID);
  return !connections.empty() && std::any_of(connections.begin(), connections.end(),
                                     [](auto c) { return !c->mData.has_value(); });
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool Node::hasUndefinedOutput(std::string const& socket) const {
  auto connection = mGraph->getInputConnection(mID, socket);
  return connection && !connection->mData.has_value();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csl::nodeeditor
