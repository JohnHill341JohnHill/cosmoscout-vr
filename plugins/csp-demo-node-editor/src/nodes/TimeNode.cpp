////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
////////////////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: German Aerospace Center (DLR) <cosmoscout@dlr.de>
// SPDX-License-Identifier: MIT

#include "TimeNode.hpp"

#include "../logger.hpp"

#include "../../../../src/cs-core/TimeControl.hpp"
#include "../../../../src/cs-utils/utils.hpp"

namespace csp::demonodeeditor {

////////////////////////////////////////////////////////////////////////////////////////////////////

const std::string TimeNode::NAME = "Time";

////////////////////////////////////////////////////////////////////////////////////////////////////

const std::string TimeNode::SOURCE = R"(
    class TimeComponent extends Rete.Component {

      constructor() {
        super("Time");

        this.category = "Inputs";
      }

      builder(node) {
        let output = new Rete.Output('number', "Seconds", CosmoScout.socketTypes['Number Value']);
        return node.addOutput(output);
      }
    }
  )";

////////////////////////////////////////////////////////////////////////////////////////////////////

std::unique_ptr<TimeNode> TimeNode::create(std::shared_ptr<cs::core::TimeControl> pTimeControl) {
  return std::make_unique<TimeNode>(pTimeControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TimeNode::TimeNode(std::shared_ptr<cs::core::TimeControl> pTimeControl)
    : mTimeControl(std::move(pTimeControl)) {

  mTimeConnection = mTimeControl->pSimulationTime.connect([this](double) { process(); });
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TimeNode::~TimeNode() {
  mTimeControl->pSimulationTime.disconnect(mTimeConnection);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::string const& TimeNode::getName() const {
  return NAME;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TimeNode::process() {
  writeOutput("number", mTimeControl->pSimulationTime.get());
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::demonodeeditor
